{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dpoplin/Calendar-ToDo-React/src/components/Schedule.jsx\";\nimport React, { useState, Component } from \"react\";\nimport ScheduleItems from \"./ScheduleItems.jsx\";\nimport Button from 'react-bootstrap/Button';\nimport \"../Schedule.css\";\nimport ls from 'local-storage';\n\nclass Schedule extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: []\n    }; // this.addItem = this.addItem.bind(this);\n    // this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage(); // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n\n    window.addEventListener(\"beforeunload\", this.saveStateToLocalStorage.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"beforeunload\", this.saveStateToLocalStorage.bind(this)); // saves if component has a chance to unmount\n\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key); // parse the localStorage string and setState\n\n        try {\n          value = JSON.parse(value);\n          this.setState({\n            [key]: value\n          });\n        } catch (e) {\n          // handle empty string\n          this.setState({\n            [key]: value\n          });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    // update react state\n    this.setState({\n      [key]: value\n    }); // update local LocalStorage\n\n    localStorage.setItem(key, value);\n  }\n\n  addItem() {\n    // create a new item\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n    }; // copy current list of items\n\n    const list = [...this.state.list]; // add the new item to the list\n\n    list.push(newItem); // update state with new list, reset the new item input\n\n    this.setState({\n      list,\n      newItem: \"\"\n    });\n  }\n\n  deleteItem(id) {\n    // copy current list of items\n    const list = [...this.state.list]; // filter out the item being deleted\n\n    const updatedList = list.filter(item => item.id !== id);\n    this.setState({\n      list: updatedList\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"scheduleMain\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        class: \"header\",\n        children: \"Add an item to the list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type item here\",\n          value: this.state.newItem,\n          onChange: e => this.updateInput(\"newItem\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.addItem(),\n          disabled: !this.state.newItem.length,\n          className: \"btn btn-dark\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"theList\",\n        children: this.state.list.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"items\",\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => this.deleteItem(item.id),\n              children: item.value\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Schedule;","map":{"version":3,"sources":["/Users/dpoplin/Calendar-ToDo-React/src/components/Schedule.jsx"],"names":["React","useState","Component","ScheduleItems","Button","ls","Schedule","constructor","props","state","newItem","list","componentDidMount","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","componentWillUnmount","removeEventListener","key","localStorage","hasOwnProperty","value","getItem","JSON","parse","setState","e","setItem","stringify","updateInput","addItem","id","Math","random","slice","push","deleteItem","updatedList","filter","item","render","target","length","map"],"mappings":"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","sourcesContent":["import React, {useState, Component} from \"react\";\nimport ScheduleItems from \"./ScheduleItems.jsx\";\nimport Button from 'react-bootstrap/Button';\nimport \"../Schedule.css\";\nimport ls from 'local-storage';\n\nclass Schedule extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem : \"\",\n      list: []\n    };\n    // this.addItem = this.addItem.bind(this);\n    // this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n    // add event listener to save state to localStorage\n   // when user leaves/refreshes the page\n   window.addEventListener(\n     \"beforeunload\",\n     this.saveStateToLocalStorage.bind(this)\n   );\n }\n\n componentWillUnmount() {\n   window.removeEventListener(\n     \"beforeunload\",\n     this.saveStateToLocalStorage.bind(this)\n   );\n\n   // saves if component has a chance to unmount\n   this.saveStateToLocalStorage();\n}\n\nhydrateStateWithLocalStorage() {\n// for all items in state\nfor (let key in this.state) {\n  // if the key exists in localStorage\n  if (localStorage.hasOwnProperty(key)) {\n    // get the key's value from localStorage\n    let value = localStorage.getItem(key);\n\n    // parse the localStorage string and setState\n    try {\n      value = JSON.parse(value);\n      this.setState({ [key]: value });\n    } catch (e) {\n      // handle empty string\n      this.setState({ [key]: value });\n    }\n  }\n}\n}\n\nsaveStateToLocalStorage() {\n   // for every item in React state\n   for (let key in this.state) {\n     // save to localStorage\n     localStorage.setItem(key, JSON.stringify(this.state[key]));\n   }\n }\n\n  updateInput(key, value) {\n      // update react state\n      this.setState({ [key]: value });\n      // update local LocalStorage\n      localStorage.setItem(key, value);\n    }\n\n    addItem() {\n      // create a new item\n      const newItem = {\n        id: 1 + Math.random(),\n        value: this.state.newItem.slice()\n      };\n\n      // copy current list of items\n      const list = [...this.state.list];\n\n      // add the new item to the list\n      list.push(newItem);\n\n      // update state with new list, reset the new item input\n      this.setState({\n        list,\n        newItem: \"\"\n      });\n\n    }\n\n    deleteItem(id) {\n      // copy current list of items\n      const list = [...this.state.list];\n      // filter out the item being deleted\n      const updatedList = list.filter(item => item.id !== id);\n\n      this.setState({ list: updatedList });\n\n    }\n\n\n    render() {\n      return (\n\n          <div class=\"scheduleMain\">\n          <h3 class=\"header\">Add an item to the list</h3>\n            <br />\n            <form>\n            <input\n              type=\"text\"\n              placeholder=\"Type item here\"\n              value={this.state.newItem}\n              onChange={e => this.updateInput(\"newItem\", e.target.value)}\n            />\n            <button\n              onClick={() => this.addItem()}\n              disabled={!this.state.newItem.length}\n              className=\"btn btn-dark\"\n            >\n              Add\n            </button>\n            </form>\n            <br /> <br />\n            <ul className=\"theList\">\n              {this.state.list.map(item => {\n                return (\n                  <div className=\"items\">\n                  <li key={item.id} onClick={() => this.deleteItem(item.id)}>\n                    {item.value}\n                  </li>\n                  </div>\n                );\n              })}\n            </ul>\n          </div>\n      );\n    }\n  }\n\nexport default Schedule;\n"]},"metadata":{},"sourceType":"module"}